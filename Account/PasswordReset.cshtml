@using Microsoft.AspNet.Identity
@using Microsoft.AspNet.Identity.EntityFramework
@using Microsoft.Owin.Security

@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Page.Title = "Password Reset";

    var passwordResetToken = Request.Form["resetToken"] ?? Request.QueryString["resetToken"];
    var email = Request["email"];

    bool tokenExpired = false;
    bool isSuccess = false;

    // Setup validation
    Validation.RequireField("newPassword", "The new password field is required.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("newPassword", "The new password and confirmation password do not match."));
    Validation.RequireField("resetToken", "The password reset token field is required.");
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "New password must be at least 6 characters"));

    if (IsPost && Validation.IsValid())
    {
        AntiForgery.Validate();
        var newPassword = Request["newPassword"];
        var confirmPassword = Request["confirmPassword"];

        var userStore = new UserStore<IdentityUser>();
        var userManager = new UserManager<IdentityUser>(userStore);
        var user = userManager.FindByEmail(email);

        if (user == null)
        {
            ModelState.AddError("resetToken", "The password reset token is invalid.");
            tokenExpired = true;
        }
        else
        {
            var result = userManager.ResetPassword(user.Id, passwordResetToken, newPassword);
            if (result.Succeeded)
            {
                isSuccess = true;
            }
            else
            {
                ModelState.AddError("resetToken", "The password reset token is invalid.");
                tokenExpired = true;
            }
        }
    }
}

<hgroup class="title">
    <h1>@Page.Title.</h1>
    <h2>Use the form below to reset your password.</h2>
</hgroup>

@if (!Validation.IsValid() && (IsPost))
{
    <p class="validation-summary-errors">
        @if (tokenExpired)
        {
            <text>The password reset token is incorrect or may be expired. Visit the <a href="~/Account/ForgotPassword">forgot password page</a>
                to generate a new one.</text>
        }
        else
        {
            <text>Could not reset password. Please correct the errors and try again.</text>
        }
    </p>
}

@if (isSuccess)
{
    <p class="message-success">
        Password changed! Click <a href="~/Account/Login" title="Log in">here</a> to log in.
    </p>
}

<form method="get">
    @AntiForgery.GetHtml()
    <fieldset>
        <legend>Password Change Form</legend>
        <ol>
            <li class="new-password">
                <label for="newPassword" @if (!ModelState.IsValidField("newPassword")) { <text> class="error-label" </text>  }>New password</label>
                <input type="password" id="newPassword" name="newPassword" disabled="@isSuccess" @Validation.For("newPassword") />
                @Html.ValidationMessage("newPassword")
            </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text>  }>Confirm password</label>
                <input type="password" id="confirmPassword" name="confirmPassword" disabled="@isSuccess" @Validation.For("confirmPassword") />
                @Html.ValidationMessage("confirmPassword")
            </li>
            <li class="reset-token">
                <label for="resetToken" @if (!ModelState.IsValidField("resetToken")) { <text> class="error-label" </text>  }>Password reset token</label>
                <input type="text" id="resetToken" name="resetToken" value="@passwordResetToken" disabled="@isSuccess" @Validation.For("resetToken") />
                @Html.ValidationMessage("resetToken")
            </li>
        </ol>
        <input type="hidden" id="email" name="email" value="@email" />
        <input type="submit" value="Reset password" disabled="@isSuccess" />
    </fieldset>
</form>
